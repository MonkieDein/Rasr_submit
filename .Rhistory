library(splines)
url <- "https://en.wikipedia.org/wiki/Transistor_count"
html = read_html(url)
transistors = html %>%
html_nodes(xpath='//*[@id="mw-content-text"]/div[1]/table[4]') %>%
html_table()
# trim dataset
data = transistors[[1]][,c(2,3)]
colnames(data) = c("number","year")
data$number = sapply(data$number,function(n) as.numeric(gsub( "," ,"", (strsplit(n, "[^0-9,]")[[1]][1]) )))
data$year = sapply(data$year,function(n) as.numeric(gsub( "," ,"", (strsplit(n, "[^0-9,]")[[1]][1]) )))
data = data[-which(is.na(data$number)|is.na(data$year)),]
write.csv(data,"TransistorCnt.csv")
set.seed(1)
update_geom_defaults("point", list(size = 1))
update_geom_defaults("path", list(size = 1, colour="red"))
update_geom_defaults("line", list(size = 1, colour="blue"))
data = read.csv("TransistorCnt.csv",row.names = 1)
url <- "https://en.wikipedia.org/wiki/Transistor_count"
html = read_html(url)
transistors = html %>%
html_nodes(xpath='//*[@id="mw-content-text"]/div[1]/table[4]') %>%
html_table()
# trim dataset
data = transistors[[1]][,c(2,3)]
colnames(data) = c("number","year")
data$number = sapply(data$number,function(n) as.numeric(gsub( "," ,"", (strsplit(n, "[^0-9,]")[[1]][1]) )))
data$year = sapply(data$year,function(n) as.numeric(gsub( "," ,"", (strsplit(n, "[^0-9,]")[[1]][1]) )))
data = data[-which(is.na(data$number)|is.na(data$year)),]
write.csv(data,"TransistorCnt.csv")
# url <- "https://en.wikipedia.org/wiki/Transistor_count"
# html = read_html(url)
# transistors = html %>%
#   html_nodes(xpath='//*[@id="mw-content-text"]/div[1]/table[4]') %>%
#   html_table()
# # trim dataset
# data = transistors[[1]][,c(2,3)]
# colnames(data) = c("number","year")
# data$number = sapply(data$number,function(n) as.numeric(gsub( "," ,"", (strsplit(n, "[^0-9,]")[[1]][1]) )))
# data$year = sapply(data$year,function(n) as.numeric(gsub( "," ,"", (strsplit(n, "[^0-9,]")[[1]][1]) )))
# data = data[-which(is.na(data$number)|is.na(data$year)),]
# write.csv(data,"TransistorCnt.csv")
set.seed(1)
update_geom_defaults("point", list(size = 1))
update_geom_defaults("path", list(size = 1, colour="red"))
update_geom_defaults("line", list(size = 1, colour="blue"))
data = read.csv("TransistorCnt.csv",row.names = 1)
data %>%
ggplot(aes(x=year)) +
geom_point(aes(y=number),colour="black") +
labs(title="Number of transistors on microchips over years")+ theme_bw(base_size=20)
linear_model = lm(number~year, data = data) %>% augment()
fitted <-  ggplot(linear_model, aes(x=year,y=number)) +
geom_point(aes(y=number))+
geom_line(aes(y=.fitted)) +
labs(title = "Number of transistors on microchips over years (Linear fit)",y = "number")
fitted + theme_bw(base_size=20)
data %>%
ggplot(aes(x=year)) +
geom_point(aes(y=number),colour="black") +
labs(title="Number of transistors on microchips over years")+ theme_bw(base_size=20)
linear_model = lm(number~year, data = data) %>% augment()
fitted <-  ggplot(linear_model, aes(x=year,y=number)) +
geom_point(aes(y=number))+
geom_line(aes(y=.fitted)) +
labs(title = "Number of transistors on microchips over years (Linear fit)",y = "number")
fitted + theme_bw(base_size=20)
data$log_num = log(data$number)
linear_model2 = lm(log_num~year, data = data) %>% augment()
fitted2 <-  ggplot(linear_model2, aes(x=year,y=log_num)) +
geom_point(aes(y=log_num))+
geom_line(aes(y=.fitted),colour="blue") +
labs(title = "Number of transistors vs year (Log-linear fit)",y = "log(numbers)")
fitted2 + theme_bw(base_size=20)
data %>%
ggplot(aes(x=year)) +
geom_point(aes(y=number),colour="black") +
labs(title="Number of transistors on microchips over years")+ theme_bw(base_size=20)
linear_model = lm(number~year, data = data) %>% augment()
fitted <-  ggplot(linear_model, aes(x=year,y=number)) +
geom_point(aes(y=number))+
geom_line(aes(y=.fitted)) +
labs(title = "Number of transistors on microchips over years (Linear fit)",y = "number")
fitted + theme_bw(base_size=15)
data$log_num = log(data$number)
linear_model2 = lm(log_num~year, data = data) %>% augment()
fitted2 <-  ggplot(linear_model2, aes(x=year,y=log_num)) +
geom_point(aes(y=log_num))+
geom_line(aes(y=.fitted),colour="blue") +
labs(title = "Number of transistors vs year (Log-linear fit)",y = "log(numbers)")
fitted2 + theme_bw(base_size=15)
# Initial linear fit analysis
plot(lm(number~year, data = data),lwd = 3,cex.lab=1.5,cex.axis=1.5)
# Log(Response) log-linear fir analysis
plot(lm(log_num~year, data = data),lwd = 3,cex.lab=1.5,cex.axis=1.5)
library(rvest)
library(tidyverse)
library(broom)
library(splines)
# url <- "https://www.baa.org/races/boston-marathon/results/champions"
# html = read_html(url)
# winning_time = html %>%
#   html_nodes(xpath='//*[@id="rte"]/table[1]') %>%
#   html_table()
# winning_time = winning_time[[1]][,c(1,4)]
# # trim dataset
# colnames(winning_time) = c("year","time")
# winning_time = winning_time[(winning_time$year>1923 & winning_time$year<2017),] # use the same region presented by FPP2
# # Change time from string to second (integer)
# secs = sapply(strsplit(winning_time$time, "\\:"),function(t) sum(as.numeric(unlist(strsplit(t,"\\*")))*c(60,1,0)) )
# winning_time$time = secs
# write.csv(winning_time,"BostonMarathonWinner.csv")
set.seed(1)
update_geom_defaults("point", list(size = 1))
update_geom_defaults("path", list(size = 1, colour="red"))
update_geom_defaults("line", list(size = 1, colour="blue"))
data = read.csv("BostonMarathonWinner.csv",row.names = 1)
# Scatter Plot
data %>%
ggplot(aes(x=year)) +
geom_line(aes(y=time),colour="black") +
labs(title="Boston marathon winning times", y = "time (minutes)")
# Fit linear model
linear_model = lm(time~year, data = data) %>% augment()
fitted <-  ggplot(linear_model, aes(x=year,y=time)) +
geom_point(aes(y=time))+
geom_line(aes(y=time),colour="black") +
geom_line(aes(y=.fitted)) +
labs(title = "Boston marathon winning times \t\t Linear fit",y = "time (minutes)")
fitted
poly_model = lm(time ~ splines::bs(year, df = 3 , Boundary.knots = c(1950,1995)), data = data) %>% augment()
spline_model = lm(time ~ splines::ns(year, df = 3, Boundary.knots = c(1950,1995)), data = data) %>% augment()
spline_model$.resid = spline_model$time-spline_model$.fitted
spline_model$year = data$year
poly_model$year = data$year
fitteds <- spline_model %>%
ggplot(aes(x=year)) +
geom_point(aes(y=time)) +
geom_line(aes(y=time),colour="black") +
geom_line(aes(y=.fitted)) +
geom_line(aes(y=.fitted,x=year), data = linear_model, colour="red") +
geom_line(aes(y=.fitted,x=year), data = poly_model, colour="green4")  +
labs(title = "Boston marathon winning times - Linear(R), Cubic-Spline(G), Natural-Cubic(B)",y = "time (mins)")
fitteds
# Linear fit plot analysis
plot(lm(time~year, data = data),lwd = 3,cex.lab=1.5,cex.axis=1.5)
# Cubic splines fit plot analysis
plot(lm(time ~ splines::bs(year, df = 3 , Boundary.knots = c(1950,1995)), data = data),lwd = 3,cex.lab=1.5,cex.axis=1.5)
# Natural Cubic splines fit plot analysis
plot(lm(time ~ splines::ns(year, df = 3, Boundary.knots = c(1950,1995)), data = data),lwd = 3,cex.lab=1.5,cex.axis=1.5)
library(rvest)
library(tidyverse)
library(broom)
library(splines)
# url <- "https://en.wikipedia.org/wiki/Transistor_count"
# html = read_html(url)
# transistors = html %>%
#   html_nodes(xpath='//*[@id="mw-content-text"]/div[1]/table[4]') %>%
#   html_table()
# # trim dataset
# data = transistors[[1]][,c(2,3)]
# colnames(data) = c("number","year")
# data$number = sapply(data$number,function(n) as.numeric(gsub( "," ,"", (strsplit(n, "[^0-9,]")[[1]][1]) )))
# data$year = sapply(data$year,function(n) as.numeric(gsub( "," ,"", (strsplit(n, "[^0-9,]")[[1]][1]) )))
# data = data[-which(is.na(data$number)|is.na(data$year)),]
# write.csv(data,"TransistorCnt.csv")
set.seed(1)
update_geom_defaults("point", list(size = 1))
update_geom_defaults("path", list(size = 1, colour="red"))
update_geom_defaults("line", list(size = 1, colour="blue"))
data = read.csv("TransistorCnt.csv",row.names = 1)
data %>%
ggplot(aes(x=year)) +
geom_point(aes(y=number),colour="black") +
labs(title="Number of transistors on microchips over years")+ theme_bw(base_size=20)
linear_model = lm(number~year, data = data) %>% augment()
fitted <-  ggplot(linear_model, aes(x=year,y=number)) +
geom_point(aes(y=number))+
geom_line(aes(y=.fitted)) +
labs(title = "Number of transistors on microchips over years (Linear fit)",y = "number")
fitted + theme_bw(base_size=15)
data$log_num = log(data$number)
linear_model2 = lm(log_num~year, data = data) %>% augment()
fitted2 <-  ggplot(linear_model2, aes(x=year,y=log_num)) +
geom_point(aes(y=log_num))+
geom_line(aes(y=.fitted),colour="blue") +
labs(title = "Number of transistors vs year (Log-linear fit)",y = "log(numbers)")
fitted2 + theme_bw(base_size=15)
# Initial linear fit analysis
plot(lm(number~year, data = data),lwd = 3,cex.lab=1.5,cex.axis=1.5)
# Log(Response) log-linear fir analysis
plot(lm(log_num~year, data = data),lwd = 3,cex.lab=1.5,cex.axis=1.5)
X = rnorm(10000)
histogram(X)
hist(X)
geom_density(X)
library(ggplot2)
X = rnorm(10000)
geom_density(X)
X = dataframe(value = rnorm(10000))
X = data.frame(value = rnorm(10000))
ggplot(X, aes(x=value)) + geom_histogram()
# Create a Random Variable
X = data.frame(value = rnorm(10000,3,1))
D_X = ggplot(X, aes(x=value)) + geom_histogram()
# Create a Random Variable
X = data.frame(value = rnorm(10000,3,1))
D_X = ggplot(X, aes(x=value)) + geom_histogram()
D_X
D_X + geom_vline(aes(xintercept=mean(value)),
color="red", linetype="solid", size=1)
# Create a Random Variable
X = data.frame(value = rnorm(100000,3,1))
D_X = ggplot(X, aes(x=value)) + geom_histogram()
D_X
D_X + geom_vline(aes(xintercept=mean(value)),
color="red", linetype="solid", size=1)
remove(list=ls())
odd.win.jackpot = 1/(70*69*68*67*66/2/3/4/5)*(1/25)
odd.win.1M = 1/(70*69*68*67*66/2/3/4/5)*(24/25)
# 1 / 70C5 *  5C4 *65C1 * (1/25) yellowball
odd.win.10K = (1*2*3*4*5)/(70*69*68*67*66)*(5*65)/25
odd.win.500 = (1*2*3*4*5)/(70*69*68*67*66)*(5*65)*(24/25)
odd.win.200 = (1*2*3*4*5)/(70*69*68*67*66)*(5*4/2*65*64/2)*(1/25)
odd.win.10 =  (1*2*3*4*5)/(70*69*68*67*66)*(5*4/2*65*64/2)*(24/25) +
(1*2*3*4*5)/(70*69*68*67*66)*(5*4/2*65*64*63/3/2)*(1/25)
odd.win.4 = (1*2*3*4*5)/(70*69*68*67*66)*(5*4/2*65*64*63/3/2)*(24/25)
odd.win.2 = 1/(70*69*68*67*66/65/64/63/62/61*25)
odd.frac = c(odd.win.jackpot,odd.win.1M,odd.win.10K,odd.win.500,
odd.win.200,odd.win.10,odd.win.4,odd.win.2)
odd.inv = 1/odd.frac
MegaMillion = data.frame(Prize = c(1600000000,1000000,10000,500,200,10,4,2),
W.B = c("5+1","5+0","4+1","4+0","3+1","3+0 or 2+1","1+1","0+1"),
ODD.fraction = odd.frac,
odd.inverse = odd.inv)
MegaMillion
library(Rlab)
install.packages(Rlab)
install.packages("Rlab")
library(Rlab)
library(ggplot2)
library(Rlab)
dbern(1,0.5)
dbern(2,0.5)
dbern(1,0.5)
dbern(c(1,2,3),c(0.5,0.2,0.3))
dber(100,0.1)
dbern(100,0.1)
dbern(1,0.1)
approx_sold = 10000000
prob.win.jackpot = 1/(70*69*68*67*66/2/3/4/5)*(1/25)
pber(1,0.5)
pbern(1,0.5)
pbern(2,0.5)
pbern(3,0.5)
pbern(4,0.5)
pbern(5,0.5)
pbern(6,0.5)
1bern(6,0.5)
qbern(6,0.5)
pbinom(1,10,0.5)
pbinom(2,10,0.5)
pbinom(3,10,0.5)
pbinom(1:10,10,0.5)
pbinom(0:10,10,0.5)
qbinom(0:10,10,0.5)
pbinom(1:10,10,0.5)
dbinom(1:10,10,0.5)
pbinom(0:10,10,0.5)
dbinom(0:10,10,0.5)
dbinom(0:10,approx_sold,prob.win.jackpot)
dbinom(0,approx_sold,prob.win.jackpot)
(70*69*68*67*66/2/3/4/5)*(24/25)
1/(70*69*68*67*66/2/3/4/5)*(1/25)
1/(1/(70*69*68*67*66/2/3/4/5)*(1/25))
1/(1/(70*69*68*67*66/2/3/4/5)*(24/25))
(1*2*3*4*5)/(70*69*68*67*66)*(5*65)/25
1/((1*2*3*4*5)/(70*69*68*67*66)*(5*65)/25)
(c(904900000,1000000,10000,500,200,10,4,2)-1)
library(ggplot2)
library(Rlab)
odd.win.jackpot = 1/(70*69*68*67*66/2/3/4/5)*(1/25)
odd.win.1M = 1/(70*69*68*67*66/2/3/4/5)*(24/25)
# 1 / 70C5 *  5C4 *65C1 * (1/25) yellowball
odd.win.10K = (1*2*3*4*5)/(70*69*68*67*66)*(5*65)/25
odd.win.500 = (1*2*3*4*5)/(70*69*68*67*66)*(5*65)*(24/25)
odd.win.200 = (1*2*3*4*5)/(70*69*68*67*66)*(5*4/2*65*64/2)*(1/25)
odd.win.10 =  (1*2*3*4*5)/(70*69*68*67*66)*(5*4/2*65*64/2)*(24/25) +
(1*2*3*4*5)/(70*69*68*67*66)*(5*4/2*65*64*63/3/2)*(1/25)
odd.win.4 = (1*2*3*4*5)/(70*69*68*67*66)*(5*4/2*65*64*63/3/2)*(24/25)
odd.win.2 = 1/(70*69*68*67*66/65/64/63/62/61*25)
odd.frac = c(odd.win.jackpot,odd.win.1M,odd.win.10K,odd.win.500,
odd.win.200,odd.win.10,odd.win.4,odd.win.2)
odd.inv = 1/odd.frac
MegaMillion = data.frame(Prize = (c(904900000,1000000,10000,500,200,10,4,2)-2),
W.B = c("5+1","5+0","4+1","4+0","3+1","3+0 or 2+1","1+1","0+1"),
ODD.fraction = odd.frac,
odd.inverse = odd.inv,
tax = c(0.37,0.25,0.15,0,0,0,0,0))
library(ggplot2)
library(Rlab)
odd.win.jackpot = 1/(70*69*68*67*66/2/3/4/5)*(1/25)
odd.win.1M = 1/(70*69*68*67*66/2/3/4/5)*(24/25)
# 1 / 70C5 *  5C4 *65C1 * (1/25) yellowball
odd.win.10K = (1*2*3*4*5)/(70*69*68*67*66)*(5*65)/25
odd.win.500 = (1*2*3*4*5)/(70*69*68*67*66)*(5*65)*(24/25)
odd.win.200 = (1*2*3*4*5)/(70*69*68*67*66)*(5*4/2*65*64/2)*(1/25)
odd.win.10 =  (1*2*3*4*5)/(70*69*68*67*66)*(5*4/2*65*64/2)*(24/25) +
(1*2*3*4*5)/(70*69*68*67*66)*(5*4/2*65*64*63/3/2)*(1/25)
odd.win.4 = (1*2*3*4*5)/(70*69*68*67*66)*(5*4/2*65*64*63/3/2)*(24/25)
odd.win.2 = 1/(70*69*68*67*66/65/64/63/62/61*25)
odd.frac = c(odd.win.jackpot,odd.win.1M,odd.win.10K,odd.win.500,
odd.win.200,odd.win.10,odd.win.4,odd.win.2)
odd.inv = 1/odd.frac
MegaMillion = data.frame(Prize = (c(904900000,1000000,10000,500,200,10,4,2)-2),
W.B = c("5+1","5+0","4+1","4+0","3+1","3+0 or 2+1","1+1","0+1"),
ODD.fraction = odd.frac,
odd.inverse = odd.inv,
tax = c(0.37,0.25,0.15,0,0,0,0,0))
MegaMillion
odd.win.jackpot = 1/(70*69*68*67*66/2/3/4/5)*(1/25)
odd.win.1M = 1/(70*69*68*67*66/2/3/4/5)*(24/25)
# 1 / 70C5 *  5C4 *65C1 * (1/25) yellowball
odd.win.10K = (1*2*3*4*5)/(70*69*68*67*66)*(5*65)/25
odd.win.500 = (1*2*3*4*5)/(70*69*68*67*66)*(5*65)*(24/25)
odd.win.200 = (1*2*3*4*5)/(70*69*68*67*66)*(5*4/2*65*64/2)*(1/25)
odd.win.10 =  (1*2*3*4*5)/(70*69*68*67*66)*(5*4/2*65*64/2)*(24/25) +
(1*2*3*4*5)/(70*69*68*67*66)*(5*4/2*65*64*63/3/2)*(1/25)
odd.win.4 = (1*2*3*4*5)/(70*69*68*67*66)*(5*4/2*65*64*63/3/2)*(24/25)
odd.win.2 = 1/(70*69*68*67*66/65/64/63/62/61*25)
odd.frac = c(odd.win.jackpot,odd.win.1M,odd.win.10K,odd.win.500,
odd.win.200,odd.win.10,odd.win.4,odd.win.2)
odd.inv = 1/odd.frac
MegaMillion = data.frame(Prize = (c(904900000,1000000,10000,500,200,10,4,2)-2),
W.B = c("5+1","5+0","4+1","4+0","3+1","3+0 or 2+1","1+1","0+1"),
probability = odd.frac,
odd.inverse = odd.inv,
tax = c(0.37,0.25,0.15,0,0,0,0,0))
MegaMillion
odd.win.jackpot = 1/(70*69*68*67*66/2/3/4/5)*(1/25)
odd.win.1M = 1/(70*69*68*67*66/2/3/4/5)*(24/25)
# 1 / 70C5 *  5C4 *65C1 * (1/25) yellowball
odd.win.10K = (1*2*3*4*5)/(70*69*68*67*66)*(5*65)/25
odd.win.500 = (1*2*3*4*5)/(70*69*68*67*66)*(5*65)*(24/25)
odd.win.200 = (1*2*3*4*5)/(70*69*68*67*66)*(5*4/2*65*64/2)*(1/25)
odd.win.10 =  (1*2*3*4*5)/(70*69*68*67*66)*(5*4/2*65*64/2)*(24/25) +
(1*2*3*4*5)/(70*69*68*67*66)*(5*4/2*65*64*63/3/2)*(1/25)
odd.win.4 = (1*2*3*4*5)/(70*69*68*67*66)*(5*4/2*65*64*63/3/2)*(24/25)
odd.win.2 = 1/(70*69*68*67*66/65/64/63/62/61*25)
odd.frac = c(odd.win.jackpot,odd.win.1M,odd.win.10K,odd.win.500,
odd.win.200,odd.win.10,odd.win.4,odd.win.2)
odd.inv = 1/odd.frac
MegaMillion = data.frame(Prize = (c(904900000,1000000,10000,500,200,10,4,2)-2),
W.B = c("5+1","5+0","4+1","4+0","3+1","3+0 or 2+1","1+1","0+1"),
probability = odd.frac,
odd.inverse = odd.inv,
tax = c(0.37,0.25,0.15,0,0,0,0,0),
uncertain_tax_expensens = c(0.03,0.02,0.01,0,0,0,0,0))
MegaMillion
MegaMillion %>% add_row(Prize = -2,W.B = "(0,1,2)+0" probability = 1-sum(MegaMillion$probability),tax = 0,uncertain_tax_expensens=0)
MegaMillion %>% add_row(Prize = -2,W.B = "(0,1,2)+0", probability = 1-sum(MegaMillion$probability),tax = 0,uncertain_tax_expensens=0)
library(tidyverse)
MegaMillion %>% add_row(Prize = -2,W.B = "(0,1,2)+0", probability = 1-sum(MegaMillion$probability),tax = 0,uncertain_tax_expensens=0)
MegaMillion %>% add_row(Prize = -2,W.B = "(0,1,2)+0", probability = 1-sum(MegaMillion$probability),odd.inverse = 1/(1-sum(MegaMillion$probability)),tax = 0,uncertain_tax_expensens=0)
MegaMillion = MegaMillion %>% add_row(Prize = -2,W.B = "(0,1,2)+0", probability = 1-sum(MegaMillion$probability),tax = 0,uncertain_tax_expensens=0)
MegaMillion
# Not winning
MegaMillion = MegaMillion %>% add_row(Prize = -2,W.B = "(0,1,2)+0", probability = 1-sum(MegaMillion$probability),odd.inverse = 1/(1-sum(MegaMillion$probability)),tax = 0,uncertain_tax_expensens=0)
MegaMillion
MegaMillion = data.frame(Prize = (c(904900000,1000000,10000,500,200,10,4,2)-2),
W.B = c("5+1","5+0","4+1","4+0","3+1","3+0 or 2+1","1+1","0+1"),
probability = odd.frac,
odd.inverse = odd.inv,
tax = c(0.37,0.25,0.15,0,0,0,0,0),
uncertain_tax_expensens = c(0.03,0.02,0.01,0,0,0,0,0))
# Not winning
MegaMillion = MegaMillion %>% add_row(Prize = -2,W.B = "(0,1,2)+0", probability = 1-sum(MegaMillion$probability),odd.inverse = 1/(1-sum(MegaMillion$probability)),tax = 0,uncertain_tax_expensens=0)
MegaMillionMegaMillion
MegaMillion
# Create a Random Variable
X = sample(MegaMillion$Prize,1000000,MegaMillion$probability)
# Create a Random Variable
X = sample(MegaMillion$Prize,1000000,MegaMillion$probability,replace = TRUE)
X
MegaMillion
dummy = function(x=1, y=x){
return(y)
}
dummy2 = function(y=x ,x=1){
return(y)
}
dummy(x=2)
dummy2(x=2)
dummy2(x=6)
dummy(x=6)
dummy = function(x=NULL, y=is.null(x)){
return(y)
}
dummy2 = function(y=is.null(x) ,x=NULL){
return(y)
}
dummy(x = 3)
dummy()
dummy2(x=3)
dummy2()
Pi =NULL
Pi[1,2]
Pi[1,]
Pi[1,3]
Pi[1,4]
load("~/.RData")
library(gurobi)
setwd("~/Desktop/GITHUB/Rasr_submit")
# Set working directory as the main folder of the code
# Change to your respective directory location
setwd("~/Desktop/GITHUB/Rasr_submit")
rm(list=ls())
source("Code/RASR_code.R")
source("Code/PflugCVaR.R")
library(zeallot)
library(gsubfn)
library(foreach) # For parallel programming purposes
library(doParallel)
library(ggplot2)
domains = c("inventory") # "riverswim","inventory","population" file too big cannot push to git.
algorithms = c("RASR","Naive","Erik","Chow")
risks = c(0.99,0.95,0.9)
# Folders
TrainFold = wdir(paste0(wdir("Eval/"),"train/"))
TestFold = wdir(paste0(wdir("Eval/"),"test/"))
# domain = "riverswim"
startTime = list()
endTime = list()
for (domain in domains){
startTime[[domain]] <- Sys.time()
if (file.exists(paste0(TestFold,domain,"/evaluation2.RData"))){
load(file = paste0(TestFold,domain,"/evaluation2.RData"))
} else{
evaluation = list()
}
cat("Evaluating",domain,"evaluator\n")
loadFold = wdir(paste0(TrainFold,domain,"/"))
# Get Solved policy
if (file.exists(paste0(loadFold,"Train.RData"))){
cat(paste0("Use Cache Evaluations ",domain,"\n"))
load(file = paste0(loadFold,"Train.RData"))
load(file = paste0(loadFold,"CRAAMPolicies.RData"))
} else{
stop("file did not exist, please run main before evaluating")
}
# Generate instances if does not exist
saveFold = wdir(paste0(wdir(paste0(TestFold,domain,"/")),"InstanceGenerator/"))
n = ifelse(domain == "riverswim",5000,100000)
t = 500
if (!file.exists(paste0(saveFold,"/instance_",n,".csv"))){
generate_sample(MDP,n,t,saveFold)
}
# Initialize required parameter
L = ERM_param$L # This is ERM levels
# intial distribution
inits = which(MDP$S_0$probability > 0)
if (sum(abs(MDP$S_0$probability[inits] - rep(1/length(inits),length(inits)))) > 1e-8){
stop("Not uniform initial S at EvalExactERMPi, please implement non stationary S0")
}
# risk = 0.9
for (risk in risks){
theta = 1-risk
# Algorithm preprocess for policy
for (alg in algorithms){
cat("Evaluating",alg,domain,"evaluator\n")
if (!is.null(evaluation[[paste0(alg,"-",risk)]])){
next
}
# Chow algorithm require to evaluate with history dependent evaluator
if (alg == "Chow"){
registerDoParallel(cores=detectCores())
# If history dependent we need to solve it with a specific evaluator
TDR_D3U <- foreach (i= 1:n,.combine = 'c') %:% foreach (s0 = inits,.combine = 'c') %dopar% {
# s0_aug = Extra$Aug$S_map[[paste(s0,which.min(abs(theta - PflugCVaROut$L)),sep="-")]]
EvalHistPi2(i,Extra$Aug$S_map[[paste(s0,which.min(abs(theta - PflugCVaROut$L)),sep="-")]],
PflugCVaROut$Pi,MDP,saveFold, Extra$Aug$S, Extra$Aug$S_map,PflugCVaROut$T_cnt,Time=t)
}
registerDoParallel(cores=1)
stopImplicitCluster()
} else{
if (alg == "RASR"){
EVaR = max(RasrErmOut$Scores + log(1-risk)/L)
pi = RasrErmOut[["Pi"]][which.max(RasrErmOut$Scores + log(1-risk)/L):ERM_param$lTl,]
} else if (alg == "Naive"){
EVaR = max(NaiveErmOut$Scores + log(1-risk)/L)
pi = matrix(NaiveErmOut[["Pi"]][which.max(NaiveErmOut$Scores + log(1-risk)/L),],nrow=1)
} else if (alg == "Erik"){
EVaR = max(EpisErmOut$Scores + log(1-risk)/L)
pi = matrix(EpisErmOut[["Pi"]][which.max(EpisErmOut$Scores + log(1-risk)/L),],nrow=1)
} else {
pi = matrix(Policies[[alg]][which(abs(Policies$risk_levels-risk)<1e-10),],nrow=1)
}
registerDoParallel(cores=detectCores())
# Chow is history dependent, we need to solve it with a history dependent evaluator
TDR_D3U <- foreach (i= 1:n,.combine = 'c') %:% foreach (s0 = inits,.combine = 'c') %dopar% {
EvalMarkovPi(i,s0,pi,MDP,saveFold,Time=t)
}
registerDoParallel(cores=1)
stopImplicitCluster()
}
evaluation[[paste0(alg,"-",risk)]] = TDR_D3U
}
save(evaluation,file = paste0(TestFold,domain,"/evaluation2.RData"))
endTime[[domain]] <- Sys.time()
}
totalTime = unlist(endTime)-unlist(startTime)
names(totalTime) = domains
